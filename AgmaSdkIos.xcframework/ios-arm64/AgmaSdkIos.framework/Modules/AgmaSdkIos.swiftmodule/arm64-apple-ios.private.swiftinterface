// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AgmaSdkIos
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AdSupport
import AppTrackingTransparency
import Combine
import Foundation
import Foundation/*.Data*/
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
import zlib
public typealias Sha256 = Swift.String
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AgmaSdk : ObjectiveC.NSObject {
  public static let defaultFlushThreshold: Swift.Int
  @objc public class Config : ObjectiveC.NSObject {
    final public let code: Swift.String
    final public let serverUrl: Foundation.URL
    public var consentString: Swift.String?
    public var app: AgmaSdkIos.Ortb2.App?
    public var user: AgmaSdkIos.Ortb2.User?
    public var flushThreshold: Swift.Int
    public var enforceAgmaVendor: Swift.Bool
    public var loggingEnabled: Swift.Bool
    @objc public init(code: Swift.String, serverUrl: Foundation.URL? = nil, consentString: Swift.String? = nil, app: AgmaSdkIos.Ortb2.App? = nil, user: AgmaSdkIos.Ortb2.User? = nil, flushThreshold: Swift.Int = defaultFlushThreshold, enforceAgmaVendor: Swift.Bool = true, loggingEnabled: Swift.Bool = false)
    @objc public init(code: Swift.String, consentString: Swift.String? = nil, app: AgmaSdkIos.Ortb2.App? = nil, user: AgmaSdkIos.Ortb2.User? = nil)
    @objc deinit
  }
  @objc public class Id5Config : ObjectiveC.NSObject {
    @objc public class AppConfig : ObjectiveC.NSObject {
      final public let bundleIdentifier: Swift.String
      final public let appVersion: Swift.String
      final public let appName: Swift.String
      @objc public init(bundleIdentifier: Swift.String, appVersion: Swift.String, appName: Swift.String)
      public static func fromBundle(_ bundle: Foundation.Bundle = .main) throws -> AgmaSdkIos.AgmaSdk.Id5Config.AppConfig
      @objc deinit
    }
    final public let appConfig: AgmaSdkIos.AgmaSdk.Id5Config.AppConfig
    final public let partner: Swift.Int
    final public let domain: Swift.String?
    final public let hem: AgmaSdkIos.Sha256?
    final public let phone: AgmaSdkIos.Sha256?
    public var partnerSpecificUserId: Swift.String? {
      get
    }
    @objc public init(appConfig: AgmaSdkIos.AgmaSdk.Id5Config.AppConfig, partner: Swift.Int, domain: Swift.String?, hem: AgmaSdkIos.Sha256? = nil, phone: AgmaSdkIos.Sha256? = nil, partnerSpecificUserId: Swift.String? = nil)
    @objc deinit
  }
  public enum Error : Swift.Error {
    case consentStringProhibitsAgmaUsage
    case sdkNotConfigured
    case bundleValueNotFound
    public static func == (a: AgmaSdkIos.AgmaSdk.Error, b: AgmaSdkIos.AgmaSdk.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc @_Concurrency.MainActor public static var shared: AgmaSdkIos.AgmaSdk {
    get
  }
  weak public var id5Delegate: (any AgmaSdkIos.Id5Delegate)?
  @objc @_Concurrency.MainActor public init(config: AgmaSdkIos.AgmaSdk.Config, urlSession: Foundation.URLSession = .shared, userDefaults: Foundation.UserDefaults = .standard, dispatchQueue: Dispatch.DispatchQueue = DispatchQueue(label: "agma_prebid_operations", qos: .background))
  @objc @_Concurrency.MainActor public init(config: AgmaSdkIos.AgmaSdk.Config)
  @objc deinit
}
@objc extension AgmaSdkIos.AgmaSdk {
  @objc dynamic public func setConfig(_ config: AgmaSdkIos.AgmaSdk.Config)
  @objc dynamic public func setConsentString(_ value: Swift.String?)
  @objc dynamic public func setApp(_ app: AgmaSdkIos.Ortb2.App?)
  @objc dynamic public func setUser(_ user: AgmaSdkIos.Ortb2.User?)
  @objc dynamic public func setId5Config(_ config: AgmaSdkIos.AgmaSdk.Id5Config)
  @objc dynamic public func setId5PartnerSpecificUserId(_ value: Swift.String?)
}
@objc extension AgmaSdkIos.AgmaSdk {
  @objc dynamic public func applicationWillResignActive()
  @objc dynamic public func sceneWillResignActive()
}
extension AgmaSdkIos.AgmaSdk : AgmaSdkIos.AgmaSdkEventReceiving {
  @objc dynamic public func didReceivePrebid(request: Foundation.Data?, response: Foundation.Data?)
  @objc dynamic public func triggerEvent(app: AgmaSdkIos.Ortb2.App? = nil, user: AgmaSdkIos.Ortb2.User? = nil)
}
public protocol AgmaSdkEventReceiving {
  func didReceivePrebid(request: Foundation.Data?, response: Foundation.Data?)
  func triggerEvent(app: AgmaSdkIos.Ortb2.App?, user: AgmaSdkIos.Ortb2.User?)
}
@objc public enum QueueFlushResult : Swift.Int, Swift.Equatable {
  case success
  case failureThresholdNotReached
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@frozen public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension AgmaSdkIos.AnyCodable : AgmaSdkIos._AnyEncodable, AgmaSdkIos._AnyDecodable {
}
extension AgmaSdkIos.AnyCodable : Swift.Equatable {
  public static func == (lhs: AgmaSdkIos.AnyCodable, rhs: AgmaSdkIos.AnyCodable) -> Swift.Bool
}
extension AgmaSdkIos.AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AgmaSdkIos.AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AgmaSdkIos.AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension AgmaSdkIos.AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension AgmaSdkIos.AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension AgmaSdkIos.AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension AgmaSdkIos.AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension AgmaSdkIos.AnyCodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension AgmaSdkIos.AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension AgmaSdkIos.AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension AgmaSdkIos.AnyCodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension AgmaSdkIos.AnyDecodable : AgmaSdkIos._AnyDecodable {
}
extension AgmaSdkIos._AnyDecodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension AgmaSdkIos.AnyDecodable : Swift.Equatable {
  public static func == (lhs: AgmaSdkIos.AnyDecodable, rhs: AgmaSdkIos.AnyDecodable) -> Swift.Bool
}
extension AgmaSdkIos.AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AgmaSdkIos.AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AgmaSdkIos.AnyDecodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension AgmaSdkIos.AnyEncodable : AgmaSdkIos._AnyEncodable {
}
extension AgmaSdkIos._AnyEncodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension AgmaSdkIos.AnyEncodable : Swift.Equatable {
  public static func == (lhs: AgmaSdkIos.AnyEncodable, rhs: AgmaSdkIos.AnyEncodable) -> Swift.Bool
}
extension AgmaSdkIos.AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AgmaSdkIos.AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AgmaSdkIos.AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension AgmaSdkIos.AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension AgmaSdkIos.AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension AgmaSdkIos.AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension AgmaSdkIos.AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension AgmaSdkIos.AnyEncodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension AgmaSdkIos.AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension AgmaSdkIos.AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension AgmaSdkIos._AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
extension AgmaSdkIos.AnyEncodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Gzip {
  public static let maxWindowBits: Swift.Int32
}
public struct CompressionLevel : Swift.RawRepresentable, Swift.Sendable {
  public let rawValue: Swift.Int32
  public static let noCompression: AgmaSdkIos.CompressionLevel
  public static let bestSpeed: AgmaSdkIos.CompressionLevel
  public static let bestCompression: AgmaSdkIos.CompressionLevel
  public static let defaultCompression: AgmaSdkIos.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error, Swift.Sendable {
  public enum Kind : Swift.Equatable, Swift.Sendable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: AgmaSdkIos.GzipError.Kind, b: AgmaSdkIos.GzipError.Kind) -> Swift.Bool
  }
  public let kind: AgmaSdkIos.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var isGzipped: Swift.Bool {
    get
  }
  public func gzipped(level: AgmaSdkIos.CompressionLevel = .defaultCompression, wBits: Swift.Int32 = Gzip.maxWindowBits + 16) throws -> Foundation.Data
  public func gunzipped(wBits: Swift.Int32 = Gzip.maxWindowBits + 32) throws -> Foundation.Data
}
public protocol Id5Delegate : ObjectiveC.NSObject {
  func onId5ResponseReceived(_ response: AgmaSdkIos.Id5Response)
}
@_hasMissingDesignatedInitializers @objc public class Id5Response : ObjectiveC.NSObject, Swift.Codable {
  final public let signature: Swift.String
  final public let createdAt: Swift.String
  final public let originalUid: Swift.String
  final public let universalUid: Swift.String
  final public let privacy: AgmaSdkIos.AnyCodable?
  final public let ext: AgmaSdkIos.Ext?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case signature
    case createdAt
    case originalUid
    case universalUid
    case privacy
    case ext
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public typealias Ext = AgmaSdkIos.AnyCodable
@_inheritsConvenienceInitializers @objc public class Ortb2 : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension AgmaSdkIos.Ortb2 {
  @objc public class App : ObjectiveC.NSObject, Swift.Codable {
    final public let id: Swift.String?
    final public let name: Swift.String?
    final public let bundle: Swift.String?
    final public let domain: Swift.String?
    final public let storeurl: Swift.String?
    final public let cat: [Swift.String]?
    final public let sectioncat: [Swift.String]?
    final public let pagecat: [Swift.String]?
    final public let ver: Swift.String?
    final public let privacypolicy: Swift.Int?
    final public let paid: Swift.Int?
    final public let keywords: Swift.String?
    final public let ext: AgmaSdkIos.Ext?
    public init(id: Swift.String?, name: Swift.String?, bundle: Swift.String?, domain: Swift.String?, storeurl: Swift.String?, cat: [Swift.String]?, sectioncat: [Swift.String]?, pagecat: [Swift.String]?, ver: Swift.String?, privacypolicy: Swift.Int?, paid: Swift.Int?, keywords: Swift.String?, ext: AgmaSdkIos.Ext?)
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
extension AgmaSdkIos.Ortb2 {
  @_hasMissingDesignatedInitializers @objc public class Geo : ObjectiveC.NSObject, Swift.Codable {
    final public let lat: Swift.Double?
    final public let lon: Swift.Double?
    final public let type: Swift.Int?
    final public let accuracy: Swift.Int?
    final public let lastfix: Swift.Int?
    final public let country: Swift.String?
    final public let region: Swift.String?
    final public let regionfips104: Swift.String?
    final public let metro: Swift.String?
    final public let city: Swift.String?
    final public let zip: Swift.String?
    final public let utcoffset: Swift.Int?
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  @_hasMissingDesignatedInitializers @objc public class Device : ObjectiveC.NSObject, Swift.Codable {
    final public let ua: Swift.String?
    final public let geo: AgmaSdkIos.Ortb2.Geo?
    final public let lmt: Swift.Int?
    final public let devicetype: Swift.Int?
    final public let make: Swift.String?
    final public let model: Swift.String?
    final public let os: Swift.String?
    final public let osv: Swift.String?
    final public let hwv: Swift.String?
    final public let h: Swift.Int?
    final public let w: Swift.Int?
    final public let ppi: Swift.Int?
    final public let pxratio: Swift.Double?
    final public let js: Swift.Int?
    final public let geofetch: Swift.Int?
    final public let flashver: Swift.String?
    final public let language: Swift.String?
    final public let carrier: Swift.String?
    final public let mccmnc: Swift.String?
    final public let connectiontype: Swift.Int?
    final public let ifa: Swift.String?
    final public let didsha1: Swift.String?
    final public let didmd5: Swift.String?
    final public let dpidsha1: Swift.String?
    final public let dpidmd5: Swift.String?
    final public let macsha1: Swift.String?
    final public let macmd5: Swift.String?
    final public let ext: AgmaSdkIos.Ext?
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
extension AgmaSdkIos.Ortb2 {
  @objc public class User : ObjectiveC.NSObject, Swift.Codable {
    final public let id: Swift.String?
    final public let buyeruid: Swift.String?
    final public let yob: Swift.Int?
    final public let gender: Swift.String?
    final public let keywords: Swift.String?
    final public let customdata: Swift.String?
    final public let ext: AgmaSdkIos.Ext?
    public init(id: Swift.String?, buyeruid: Swift.String?, yob: Swift.Int?, gender: Swift.String?, keywords: Swift.String?, customdata: Swift.String?, ext: AgmaSdkIos.Ext?)
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
extension AgmaSdkIos.AgmaSdk.Error : Swift.Equatable {}
extension AgmaSdkIos.AgmaSdk.Error : Swift.Hashable {}
extension AgmaSdkIos.QueueFlushResult : Swift.Hashable {}
extension AgmaSdkIos.QueueFlushResult : Swift.RawRepresentable {}
extension AgmaSdkIos.Id5Response.CodingKeys : Swift.Equatable {}
extension AgmaSdkIos.Id5Response.CodingKeys : Swift.Hashable {}
extension AgmaSdkIos.Id5Response.CodingKeys : Swift.RawRepresentable {}
